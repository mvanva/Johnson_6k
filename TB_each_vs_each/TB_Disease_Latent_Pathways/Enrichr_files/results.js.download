/**
 * Base64 encode / decode http://www.webtoolkit.info/
 */

var Base64 = {
    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode: function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output + this._keyStr.charAt(enc1)
                + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3)
                + this._keyStr.charAt(enc4);
        }

        return output;
    },

    // private method for UTF-8 encoding
    _utf8_encode: function (string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }

        return utftext;
    }
};

var clusterLink = {};

// Extension to jquery to add a data-type that allows sorting of scientific
// notation
jQuery.extend(jQuery.fn.dataTableExt.oSort, {
    'scientific-pre': function (a) {
        return parseFloat(a);
    },

    'scientific-asc': function (a, b) {
        return ((a < b) ? -1 : ((a > b) ? 1 : 0));
    },

    'scientific-desc': function (a, b) {
        return ((a < b) ? 1 : ((a > b) ? -1 : 0));
    }
});

function processListId(listId, json, userListId, description) {
    if (json.expired) {
        $('#session-warning').slideDown('fast', function () {
            toggleClose();
        });
    } else {
        var url = window.location.protocol + '//' + window.location.host
            + '/Enrichr/enrich?dataset=' + json.link_id;
        listId = json.link_id;
        $('#share-link input').val(url);
        // sharePopup();
        $('#save').addClass('saved');
        // $('#save a')[0].onclick = null;
    }
    // saveResult body end
    // contributePopup(description, listId)
    var popup = $('#contribute-form');
    var blanket = $('#blanket');
    centerPopup(popup);
    loadPopup(popup, blanket);
    popup.find('#short-desc input[name=shortDescription]').val(description);
    popup.find('input[name=listId]').val(listId);
}

// Contribute
function contributePopup(userListId, description) {
    if (sessionStorage.contributed === 'true') {

        // saveResult body goes here
        var dataUrl = queryString('q');
        var listId;
        dataUrl = (dataUrl) ? dataUrl : 'share';
        $.getJSON(dataUrl, {userListId: userListId}, function (json) {
            listId = json.link_id;
            processListId(listId, json, userListId, description)
        });

    }
    return false;
}

function validateContribute() {
    var description = $('form#contribute textarea[name=description]');

    if (description.val().trim() === '') {
        alert('You must enter some kind of description for the list.');
        description.addClass('error');
    } else
        return true;

    return false;
}

function submitContribute() {
    if (validateContribute()) {
        $
            .ajax({
                type: 'POST',
                url: 'contribute',
                dataType: 'json',
                data: {
                    listId: $('form#contribute input[name=listId]').val(),
                    description: $(
                        'form#contribute textarea[name=description]')
                        .val(),
                    privacy: !$('form#contribute input[name=privacy]')
                        .prop('checked')
                },
                success: function (json) {
                    if (json.message) {
                        alert(json.message);
                    } else if (json.redirect) {
                        window.location.replace(json.redirect);
                    } else if (json.listId) {
                        alert('Thanks for contributing and making Enrichr better!');
                    }
                    disableAllPopup();
                }
            });
    }

    return false;
}

// Contribute

// Create tables
function createTable(id, dataArray, container) {
    // Switch columns because jQuery dataTable plug-in shows columns
    // sequentially
    var dataArray_switch = [];
    for (var i = 0; i < dataArray.length; i++) {
        dataArray_switch[i] = [dataArray[i][0], dataArray[i][1],
            dataArray[i][2], dataArray[i][6], dataArray[i][3],
            dataArray[i][4], dataArray[i][5]];
    }
    $(container + ' table.results_table').dataTable(
        {
            'aaData': dataArray_switch,
            'fnCreatedRow': function (nRow, aData, iDataIndex) {
                $(nRow).attr('title', aData[6].join(', '));
            },
            'fnRowCallback': function (nRow, aData, iDisplayIndex,
                                       iDisplayIndexFull) {
                if (this.fnSettings().oPreviousSearch.sSearch === '') {
                    $('td:first-child', nRow).html(iDisplayIndexFull + 1);
                }
                $(nRow).aToolTip({
                    toolTipClass: 'defaultTheme gene-overlap'
                });
            },
            'aoColumnDefs': [
                {
                    'aTargets': [0],
                    'sTitle': 'Index',
                    'sClass': 'center',
                    'sWidth': '5%',
                    'bSortable': false,
                    'bSearchable': false
                },
                {
                    'aTargets': [1],
                    'sTitle': 'Name',
                    'sClass': 'left',
                    'mRender': function (data, type, full) {
                        // Data - name of term, type - 'display', 'full'
                        // - position, name of term, p-value, z-score,
                        // combined score, overlapping genes, q-value
                        var dataout = data;
                        if (full[5].length < 5) {
                            dataout = data + '*';
                        }
                        if (id in globals.linkMap) {
                            var linkArray = globals.linkMap[id];
                            var match = (new RegExp(linkArray[0]))
                                .exec(data);
                            var termId = match[linkArray[1]];
                            if (data) {
                                return '<a href="' + linkArray[2]
                                    + termId + '" target="_blank">'
                                    + dataout + '</a>';
                            }
                        }

                        return dataout;
                    }
                }, {
                    'aTargets': [2],
                    'sTitle': 'P-value',
                    'sClass': 'right',
                    'sWidth': '15%',
                    'sType': 'scientific',
                    // 'asSorting' : [ 'asc' ],
                    'bSearchable': false,
                    'mRender': function (data) {
                        return data.toPrecision(4);
                    }
                }, {
                    'aTargets': [3],
                    'sTitle': 'Adjusted p-value',
                    'sClass': 'right',
                    'sWidth': '15%',
                    'sType': 'scientific',
                    // 'asSorting' : [ 'asc' ],
                    'bSearchable': false,
                    'mRender': function (data) {
                        return data.toPrecision(4);
                    }
                }, {
                    'aTargets': [4],
                    'sTitle': 'Odds Ratio',
                    'sClass': 'right',
                    'sWidth': '10%',
                    // 'asSorting' : [ 'asc' ],
                    'bSearchable': false,
                    'mRender': function (data) {
                        return data.toFixed(2);
                    }
                }, {
                    'aTargets': [5],
                    'sTitle': 'Combined score',
                    'sClass': 'right',
                    'sWidth': '10%',
                    // 'asSorting' : [ 'desc' ],
                    'bSearchable': false,
                    'mRender': function (data) {
                        return data.toFixed(2);
                    }
                }],
            'aaSorting': [[5, 'desc']],
            'oLanguage': {
                'sLengthMenu': '_MENU_ entries per page'
            }
        });
    $(container + ' div.dataTables_info').after($(container + ' div.export'));
    $(container + ' th').eq(2).attr('title', globals.modeDescriptions[1]);
    $(container + ' th').eq(3).attr('title', globals.modeDescriptions[2]);
    $(container + ' th').eq(4).attr('title', globals.modeDescriptions[0]);
    $(container + ' th[title]').aToolTip({
        toolTipClass: 'defaultTheme method-desc'
    });
}

// Creates the color wheel for changing the color of the bar graph, grid, and
// network
function createColorWheel(pixels, container, startingColor) {
    var sqrt3 = Math.sqrt(3);
    var rows = [
        ['#00ffff', '#33ccff', '#3399ff', '#6699ff'],
        ['#66ffcc', '#66ffff', '#66ccff', '#99ccff', '#9999ff'],
        ['#66ff99', '#99ffcc', '#ccffff', '#ccccff', '#cc99ff', '#cc66ff'],
        ['#66ff66', '#99ff99', '#ccffcc', '#ffffff', '#ffccff', '#ff99ff',
            '#ff66ff'],
        ['#99ff66', '#ccff99', '#ffffcc', '#ffcccc', '#ff99cc', '#ff66cc'],
        ['#ccff66', '#ffff99', '#ffcc99', '#ff9999', '#ff6699'],
        ['#ffff66', '#ffcc66', '#ff9966', '#ff6666']];

    var svg = d3.select(container + ' div.settings').append('svg:svg').attr(
        'height', 7 * pixels * sqrt3).attr('width', 7 * pixels * sqrt3);
    var mid = Math.floor(rows.length / 2);

    for (var r = 0; r < rows.length; r++) {
        var shift = Math.abs(mid - r);
        for (var hex = 0; hex < rows[r].length; hex++) {
            var columnOrigin = sqrt3 * shift / 2 * pixels + hex * sqrt3
                * pixels;
            var rowOrigin = pixels / 2 + ((r + 1) * 1.5 * pixels);
            var up = pixels / 2;
            var right = sqrt3 * pixels / 2;
            var path = ["M", columnOrigin, rowOrigin, "l", right, up, "l",
                right, -up, "l", 0, -pixels, "l", -right, -up, "l", -right,
                up, "Z"].join(" ");
            svg.append('svg:path').attr('d', path).style('fill', rows[r][hex])
                .style('stroke', '#000000').style(
                'stroke-width',
                function (d) {
                    return (rows[r][hex] === startingColor) ? '1px'
                        : '0px';
                }).on(
                'click',
                function () {
                    d3.selectAll(
                        container + ' div.settings svg path')
                        .style('stroke-width', '0px');
                    this.style.strokeWidth = '1px';
                    recolor(container, this.style.fill);
                    toggleSettings(container);
                });
        }
    }
}

function recolor(container, color) {
    d3.barGraph.recolor(container + ' div.bar-graph', color);
    d3.grid.recolor(container + ' div.grid', color);
    d3.gridNetwork.recolor(container + ' div.grid-network', color);
}

function toggleSettings(container) {
    if (!$(container + ' div.selected').hasClass('table')) {
        $(container + ' div.settings').fadeToggle();
    }
}

/*
 * Creates a form to force downloads download( url, data [, method] ) data is an
 * associative array
 */
function download(url, data, method) {
    if (url && data) {
        var form = document.createElement('form');
        form.setAttribute('action', url);
        form.setAttribute('method', method || 'post');

        for (var key in data) {
            var inputField = document.createElement('input');
            inputField.setAttribute('type', 'hidden');
            inputField.setAttribute('name', key);
            inputField.setAttribute('value', data[key]);
            form.appendChild(inputField);
        }
        document.body.appendChild(form);
        form.submit();
        document.body.removeChild(form);
    }
}

function svgExport(container, filename, outputType) {
    var b64 = $(container + ' div.svg-container').html();
    b64 = b64.replace(/<br>/g, "&lt;br&gt;");
    b64 = b64.replace(/<br\/>/g, "&lt;br&gt;&#47;");
    b64 = encodeURIComponent(Base64.encode(b64));
    download('https://amp.pharm.mssm.edu/Convertr/convert', {
        filename: filename,
        outputType: outputType,
        data: b64
    });

}

function tsvExport(filename, backgroundType) {
    // Suggest we use a meta dict with information we are missing (including header and GeneSetSize)
//	var data = 'data:text/tsv;charset=utf-8,';
//	data += 'Term	Overlap	P-value	Adjusted P-value	Old P-value	Old Adjusted P-value	Z-score	Combined Score	Genes\r\n';
//	header = {
//			'associatedTerm': 1,
//			'pValue': 2,
//			'adjustedPValue': 6,
//			'zScore': 3,
//			'combinedScore': 4,
////			'overlap': 0,
////			'pValueOld': 0,
////			'adjustedPValueOld': 0,
//	}
//	data += value.map(function(row, ind) {
//		row[meta.header['associatedTerm']]
//		var rowData = '';
//		rowData += row[header['associatedTerm']] + '\t';
//		rowData += row[header['overlap']].length / geneSetSize('associatedTerm') + '\t';
//		rowData += row[header['pValue']].toFixed(30) + '\t';
//		rowData += row[header['adjustedPValue']].toFixed(30) + '\t';
//		rowData += row[header['pValueOld']].toFixed(30) + '\t';
//		rowData += row[header['adjustedPValueOld']].toFixed(30) + '\t';
//		rowData += row[header['zScore']].toFixed(30) + '\t';
//		rowData += row[header['combinedScore']].toFixed(30) + '\t';
//		rowData += row[header['overlap']].join(';');
//		return rowData;
//	}).join('\r\n');
    download('export', {
        filename: filename,
        backgroundType: backgroundType
    }, 'get');
}

// Shows the category
function showCategory(index, name) {
    $('.lib-info').show();
    $('.beveled.results.active > div.header > table').hide();
    $('a.title').css('font-size', '1.16em');
    if (globals.changingCategory)
        return;
    else
        globals.changingCategory = true;
    toggleClose();
    $('.beveled.results').addClass('vis');
    $('div.shown').fadeOut('slow', function () {
        $('.shown').removeClass('shown');
        $('div.category').eq(index).addClass('shown');
        $('#navbar td').eq(index).addClass('shown');
        $('div.shown').fadeIn('slow');
        globals.changingCategory = false;
        showThumbnails(index);
    });

    gtag('event', 'main', {
        'event_category': 'Library Category',
        'event_action': 'click',
        'event_label': name,
    });
}

function replaceAll(str, find, replace) {
    return str.replace(new RegExp(find, 'g'), replace);
}

function addDescription() {
    $.getJSON('json/libraries.json', function (json) {
        for (var lib in json) {
            var lib_name = replaceAll(('#' + lib + '-info'), ' ', '_');
            $(lib_name).aToolTip({
                tipContent: json[lib].description
            });
            $(lib_name + '-main').aToolTip({
                tipContent: json[lib].description
            });
        }
    });
}

function cluster_separate_request(id, userListId) {
    var idTagCluster = '#' + id;
    var dataUrl = queryString('q');
    dataUrl = (dataUrl) ? dataUrl : 'enrich';
    $
        .getJSON(
            dataUrl,
            {
                backgroundType: id,
                userListId: userListId
            },
            function (json) {
                if (json.expired) {
                    $('#session-warning').slideDown('fast', function () {
                        toggleClose();
                    });
                } else {

                    // Generating Clustergramer link
                    var clusterJSON = JSON.stringify({
                        gmt: id,
                        enr_list: json[id],
                        userListId: userListId
                    });
                    if (typeof clusterLink[idTagCluster] === 'undefined') {
                        // post request to clustergrammer, only run if
                        // link is not present
                        var xhr = new XMLHttpRequest();
                        var url = "https://amp.pharm.mssm.edu/clustergrammer/Enrichr_clustergram";
                        xhr.open("POST", url, true);
                        xhr.setRequestHeader("Content-type",
                            "application/json");
                        xhr.send(clusterJSON);
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4
                                && xhr.status === 200) {
                                var json = JSON.parse(xhr.responseText);
                                clusterLink[idTagCluster] = json.link;
                                d3.selectAll('.loader_cluster').style('display', 'none');
                                d3.selectAll('.cluster_iframe').style('display', 'block');

                                // make clustergram after getting
                                // response from clustergrammer web app
                                setClusterIframe(idTagCluster);

                            }
                        }
                    }
                }

            });
}

// Animates the transition between different tabs
function navigateTo(index, container, userListId) {
    if (globals.changingTabs)
        return;
    else
        globals.changingTabs = true;
    if (index === 1 && $(container + ' div.settings').css('display') === 'block') {
        toggleSettings(container);
    }
    $(container + ' div.content div.selected')
        .fadeOut(
            400,
            function () {
                $(container + ' .selected').removeClass('selected');
                $(container + ' div.header table.nav td').eq(index)
                    .addClass('selected');
                $(container + ' div.content > div').eq(index).addClass(
                    'selected');
                $(container + ' div.selected').fadeIn();
                globals.changingTabs = false;
                var selected_tab = d3.select(container).select('table')
                    .select('.selected').text().replace(/\s+/g, '');
                if (selected_tab === 'Clustergram'
                    || selected_tab === 'Table') {
                    shadeCog(container);
                } else {
                    showCog(container);
                }
                if (selected_tab === 'Clustergram') {
                    cluster_separate_request(container.substring(1),
                        userListId);
                }
            });
    gtag('event', 'main', {
        'event_category': 'Visualization type',
        'event_action': 'click',
        'event_label': ['Bar graph', 'Table',
        'Grid', 'Network', 'Cluster'][index],
    });
}

function shadeCog(container) {
    d3.select(container).select('.nav').select('.cog').style('opacity', '0.2');
    d3.select(container + '-settings-link').style('pointer-events', 'none')
        .style('cursor', 'default');
}

function showCog(container) {
    d3.select(container).select('.nav').select('.cog').style('opacity', '1');
    d3.select(container + '-settings-link').style('cursor', 'pointer');
    d3.select(container + '-settings-link').style('pointer-events', null);
}

function setClusterIframe(container) {
    d3.selectAll('iframe').remove();
    // display clustergram iframe if link is defined
    if (typeof (clusterLink[container]) !== 'undefined') {
        $(container + ' .cluster_iframe_container')
            .html(
                "<iframe class='cluster_iframe' id='iframe preview' src='"
                + clusterLink[container].replace('http', 'https')
                + "' height='620' width='700' frameBorder='0'></iframe>");
        d3.selectAll('.cluster_iframe').style('display', 'block');
        d3.selectAll('.loader_cluster').style('display', 'none');
    } else {
        d3.selectAll('.loader_cluster').style('display', 'block');
    }

}

/* Functions to open and close modules */
function toggleClose() {
    // $('#blanket').fadeOut();
    // $('.popup').fadeOut();
    $('div.active div.content').slideUp();
    $('div.active table.nav').fadeOut();
    $('div.active').removeClass('active');
}

function toggleOpen(id) {
    // var popup = $('#' + id);
    // var blanket = $('#blanket');
    // centerPopup(popup);
    // loadPopup(popup, blanket);
    $('#' + id).addClass('active');
    $('div.active div.content').slideDown();
    $('div.active table.nav').fadeIn();
}

function fixIcons() {
    $('.lib-info').hide();
    $('.beveled.vis').removeClass('vis');
    $('.bar-graph-thumb').hide();
    $('.fa').css({
        'font-size': '16px',
        'color': '#000'
    });
    $('a.title').css('font-size', '1.5em');
}

function openResult(id, userListId) {
    fixIcons();
    if ($('div.active').attr('id') === id) {
        toggleClose();
    } else {
        toggleClose();
        toggleOpen(id);
//		$('#'+ id + ' div.header table.nav td').eq(4).addClass('inactiveLink');
        getResult(id, userListId);

        gtag('event', 'main', {
            'event_category': 'Gene Set Library',
            'event_action': click,
            'event_label': id,
        });
    }
}

function getThumbnail(id, userListId) {
    var idTag = '#' + id;
    d3.selectAll('iframe').remove();

    var dataUrl = queryString('q');
    dataUrl = (dataUrl) ? dataUrl : 'enrich';
    $.getJSON(dataUrl, {
        backgroundType: id,
        userListId: userListId
    }, function (json) {
        if (json.expired) {
            $('#session-warning').slideDown('fast', function () {
                toggleClose();
            });
        } else {
            $(idTag + '  > div.bar-graph-thumb > img').remove();
            d3.barGraphThumb.createBarGraph(
                json[id], idTag + ' div.bar-graph-thumb', {
                    minColor: '#713939',
                    maxColor: '#ff6666',
                    currentMode: function (options) {
                        return options.modeDisplays[0];
                    },
                    modes: [
                        function pvalue(d) {
                            return -Math.log(d[2]);
                        },
                        function combinedscore(d) {
                            return d[4];
                        },
                        function rank(d) {
                            return -d[3];
                        },
                    ],
                    modeFunction: function (options) {
                        var mode = options.modeDisplays.shift();

                        options.modeDisplays.push(mode);
                        // Current mode
                        mode = options.modeDisplays[0];
                        $(idTag + ' div.bar-graph-thumb div.method span')
                            .text(mode);

                        var modeDesc = options.modeDescriptions.shift();
                        options.modeDescriptions.push(modeDesc);
                        modeDesc = options.modeDescriptions[0];
                        $(idTag + ' div.bar-graph-thumb div.method span').aToolTip(
                            {
                                tipContent: modeDesc,
                                toolTipClass: 'defaultTheme method-desc'
                            });
                    },
                    modeDisplays: [
                        'p-value ranking',
                        'combined score ranking',
                        'rank based ranking',
                    ],
                    modeDescriptions: globals.modeDescriptions.slice(0)
                });
            $(idTag + ' div.bar-graph-thumb div.method').fadeIn('slow');
            $(idTag + ' div.bar-graph-thumb div.method span').aToolTip({
                tipContent: globals.modeDescriptions[0],
                toolTipClass: 'defaultTheme method-desc'
            });
        }
    });
}

function showThumbnails(index) {
    //	var categories = $("body > div.category.shown")[0];
    var categories = $(".category")[index];
    categories = $(categories).find('.beveled');
    $('.bar-graph-thumb').show();
    for (var i = 0; i < categories.length; i++) {
        var category = categories[i].id,
        userlistid = $("#userListId").val();
        getThumbnail(category, userlistid)
    }
}

function getResult(id, userListId) {
    var idTag = '#' + id;

    d3.selectAll('iframe').remove();

    var selected_tab = d3.select(idTag).select('table').select('.selected')
        .text().replace(/\s+/g, '');

    // remake clustergram if clustergram tab is already selected
    if (selected_tab === 'Clustergram') {
        setClusterIframe(idTag);
    }
    if (!$(idTag + ' div.content').hasClass('done')) {
        var dataUrl = queryString('q');
        dataUrl = (dataUrl) ? dataUrl : 'enrich';
        $.getJSON(dataUrl, {
            backgroundType: id,
            userListId: userListId
        }, function (json) {
            if (json.expired) {
                $('#session-warning').slideDown('fast', function () {
                    toggleClose();
                });
            } else {
//				$(idTag + ' div.header table.nav td').eq(4).removeClass('inactiveLink');
                $(idTag + ' div.content img.loader').remove();
                $(idTag + ' div.content').addClass('done');
                d3.barGraph.createBarGraph(
                    json[id], idTag + ' div.bar-graph', {
                        minColor: '#713939',
                        maxColor: '#ff6666',
                        currentMode: function (options) {
                            return options.modeDisplays[0];
                        },
                        modes: [
                            function pvalue(d) {
                                return -Math.log(d[2]);
                            },
                            function combinedscore(d) {
                                return d[4];
                            },
                            function rank(d) {
                                return -d[3];
                            }
                        ],
                        modeFunction: function (options) {
                            var mode = options.modeDisplays.shift();

                            options.modeDisplays.push(mode);
                            // Current mode
                            mode = options.modeDisplays[0];
                            $(idTag + ' div.bar-graph div.method span').text(mode);

                            var modeDesc = options.modeDescriptions.shift();
                            options.modeDescriptions.push(modeDesc);
                            modeDesc = options.modeDescriptions[0];
                            $(idTag + ' div.bar-graph div.method span').aToolTip({
                                tipContent: modeDesc,
                                toolTipClass: 'defaultTheme method-desc'
                            });
                        },
                        modeDisplays: [
                            'p-value ranking',
                            'combined score ranking',
                            'rank based ranking',
                        ],
                        modeDescriptions: globals.modeDescriptions.slice(0)
                    });
                $(idTag + ' div.bar-graph div.method').fadeIn('slow');
                $(idTag + ' div.bar-graph div.method span').aToolTip({
                    tipContent: globals.modeDescriptions[0],
                    toolTipClass: 'defaultTheme method-desc'
                });

                $(idTag + ' div.downloadbox').fadeIn('slow');
                createTable(id, json[id], idTag + ' div.table');

//				$(idTag + '-TableExport-link').attr(
//						'href',
//						tsvExport(json[id])
//				);

                d3.grid.createGridFromGet('canvas', {
                    libraryName: id
                }, json[id], idTag + ' div.grid', {
                    highlightCount: 10,
                    highlightName: function (d) {
                        return d[1];
                    },
                    highlightValue: function (d) {
                        return d[4];
                    },
                    highlightFunction: function (c) {
                        var highlightSelection = d3.selectAll(c);

                        highlightSelection.attr(
                            'title',
                            function (d) {
                                var currentSelection = d3.select(this);

                                return currentSelection.attr('label')
                                    + '<br/>'
                                    + currentSelection
                                        .attr('highlightValue');
                            }).selectAll('title').remove();
                        $(c).aToolTip({
                            fixed: true,
                            xOffset: 4,
                            yOffset: 1
                        });
                    },
                    clusterFunction: function (z) {
                        var container = idTag + ' div.grid td.scores';
                        $(container + ' span.zscore').text(z.toPrecision(4));
                        var pvalue = (1 - poz(-z)).toPrecision(4);
                        $(container + ' span.pvalue').text(pvalue);
                        if (pvalue < 0.1) {
                            $(container + ' span').css('color', '#D90000');
                            $(container + ' span.pvalue').attr('title',
                                'Significant');
                        }
                    },
                    cache: false
                });

                d3.gridNetwork.createGridNetworkFromGet('canvas', {
                    libraryName: id
                }, json[id], idTag + ' div.grid-network', {
                    nodeColor: '#ff6666',
                    cache: false
                });

                createColorWheel(10, idTag, '#ff6666');
            }

        });
    }
}

function viewPopup(userListId) {
    var popup = $('#view-gene-popup');
    var blanket = $('#blanket');

    var genesTextArea = $('#gene-list-textarea');

    genesTextArea.html('');
    $.getJSON('view', {userListId: userListId}, function (json) {
        for (var i = 0; i < json.genes.length; i++) {
            genesTextArea.append(json.genes[i].concat('&#13;&#10;'));
        }
    });

    centerPopup(popup);
    loadPopup(popup, blanket);

    return false;
}

/**
 * Share results and display a popup with the link.
 */
function saveResult(userListId) {
    var dataUrl = queryString('q');
    dataUrl = (dataUrl) ? dataUrl : 'share';
    $.getJSON(dataUrl, {userListId: userListId}, function (json) {
        if (json.expired) {
            $('#session-warning').slideDown('fast', function () {
                toggleClose();
            });
        } else {
            var url = window.location.protocol + '//' + window.location.host
                + '/Enrichr/enrich?dataset=' + json.link_id;
            $('#share-link input').val(url);
            sharePopup();
            $('#save').addClass('saved');
            $('#save a')[0].onclick = null;
        }
    });
}

function shareResult(userListId) {
    $.getJSON('view', {userListId: userListId}, function (json) {
        if ($('#share-link input').val()) {
            sharePopup();
        } else {
            saveResult(userListId);
        }
    });
}

function sharePopup() {
    var popup = '#share-link';
    centerPopup(popup);
    loadPopup(popup);
    $(popup + ' input').select();
}

function loadPopup(popup) {
    $('#blanket').css('opacity', '0.65').fadeIn("slow");
    $(popup).fadeIn("slow");
}

function disableAllPopup() {
    $('#blanket').fadeOut();
    $('.popup').fadeOut();
}

function centerPopup(selector) {
    // request data for centering
    var popupHeight = $(selector).height();
    var popupWidth = $(selector).width();
    // centering
    $(selector).css({
        "margin-top": -1 * popupHeight / 2,
        "margin-left": -1 * popupWidth / 2
    });
}

/* Looks for the value of a query string in the URL */
function queryString(search_for) {
    var query = window.location.search.substring(1);
    var parms = query.split('&');
    for (var i = 0; i < parms.length; i++) {
        var pos = parms[i].indexOf('=');
        if (pos > 0 && search_for === parms[i].substring(0, pos)) {
            return parms[i].substring(pos + 1);
        }
    }
    return "";
}

// function populateSummary(json){

// }

/* Results page setup */
$(document)
    .ready(
        function () {
            $.ajaxSetup({
                cache: false
            }); // Prevent IE from caching GET requests
            globals = {}; // Stores global vars
            globals.changingCategory = false; // Prevent changing
            // category too fast
            globals.changingTabs = false; // Prevent changing tabs too
            // fast
            globals.modeDescriptions = [
                'The p-value is computed from the Fisher exact test which is a proportion test that assumes a binomial distribution and independence for probability of any gene belonging to any set.',
                'Combined score is computed by taking the log of the p-value from the Fisher exact test and multiplying that by the z-score of the deviation from the expected rank.',
                'The rank based ranking is derived from running the Fisher exact test for many random gene sets in order to compute a mean rank and standard deviation from the expected rank for each term in the gene-set library and finally calculating a z-score to assess the deviation from the expected rank.',
            ];

            // Populate shared link if from shared link
            if (queryString('dataset')) {
                $('#share-link input').val(window.location.href);
                // $('#save').addClass('saved');
                // $('#save a')[0].onclick = null;
            }
            $.getJSON('json/linkmap.json', function (json) {
                globals.linkMap = json;
            });

            // $.getJSON('summary', function(json) {
            // populateSummary(json);
            // });
            $('form#contribute').submit(submitContribute);
            // Enable placeholders and error messages for required
            // fields
            $('.has-placeholder, .required').focus(function () {
                var input = $(this);
                input.next('span.placeholder-text').hide();
                if (input.hasClass('required')) {
                    input.siblings('div.errormsg').hide();
                    input.removeClass('error');
                }
            }).blur(function () {
                var input = $(this);
                if (input.val() === '') {
                    input.next('span.placeholder-text').show();
                    if (input.hasClass('required')) {
                        input.siblings('div.errormsg').show();
                        input.addClass('error');
                    }
                }
            });
            // Showing thumbnails
            addDescription();
            showThumbnails(0);
        });