---
title: "TB Infection Resistance Pathway Analysis for SCTK"
author: "Arthur J. VanValkenburg"
date: "7/27/2019"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
  library(tidyverse)
  library(stringr)
  library(singleCellTK)
  library(TBSignatureProfiler)
  
  })

```

## Load in data
```{r Load data}

brazil_data <- readRDS("C:/Users/Art/Desktop/CodeMonkey/Johnson Lab TB Project/TB_data/TB_data/data/brazil_data_SE.RDS")
brazil_data
```



## Create SCE object
```{r SCE}
counts_m <- assay(brazil_data,"counts")

#data("counts_m")
brazil_sce <- createSCE(assayFile = counts_m,
                       annotFile = brazil_data@colData,
                       assayName = "counts",
                       inputDataFrames = TRUE,
                       createLogCounts = TRUE)

view(brazil_sce)

```



## Create a logCPM, logcounts, and CPM assay, store in brazil_sce
```{r Assay}
# Create a logCPM, logcounts, and CPM assay
brazil_sce <- mkAssay(brazil_sce, log = TRUE)
brazil_sce

```

## Filter by TB_status
```{r Filter}

#List of TB_status to keep
status <- c("Latent", "Progressor")

#Smaller subset of filtered data
brazil_sce_subset <- brazil_sce[, brazil_sce$TB_status %in% status]

#show if filtering worked
table(brazil_sce_subset@colData$TB_status)
table(brazil_sce@colData$TB_status)


brazil_sce_subset <- filterSCData(brazil_sce_subset, 
                                  useAssay = "log_cpm",
                                  deletesamples = NULL,
                                  removeNoExpress = TRUE,
                                  removeBottom = 0.5,
                                  minimumDetectGenes = 1700,
                                  filterSpike = TRUE)


```

## Differential Expression Analysis
```{r Diff Exp}


#method 1
res <- scDiffEx(brazil_sce_subset,
                useAssay = "log_cpm",
                condition = "TB_status",
                significance = 0.05,
                ntop = 500, 
                usesig = TRUE,
                diffexmethod = "limma",
                levelofinterest = "Latent",
                analysisType = "allcoef",
                adjust = "fdr")


#plot heatmap
plotDiffEx(brazil_sce_subset, 
           condition = "TB_status",
           geneList = rownames(res)[1:500], 
           annotationColors = "auto",
           displayColumnLabels = FALSE,
           scaleExpression = TRUE)


summarizeTable(brazil_sce_subset, useAssay = "log_cpm")
```

##Reduced Dimension Analysis
```{r}
reducedDims(brazil_sce_subset)

brazil_sce_subset <- getPCA(brazil_sce_subset, 
                            useAssay = "log_cpm",
                            reducedDimName = "PCA_log_cpm")

brazil_sce_subset <- getTSNE(brazil_sce_subset, 
                             useAssay = "log_cpm",
                             reducedDimName = "TSNE_log_cpm")

reducedDims(brazil_sce_subset)

plotPCA(brazil_sce_subset, 
        reducedDimName = "PCA_log_cpm",
        colorBy = "TB_status")

plotTSNE(brazil_sce_subset, 
         reducedDimName = "TSNE_log_cpm",
         colorBy = "TB_status")

```

## Use results from Limma analysis on log CPM (from shiny app) to look at different genes
### A negative value for TB Progressor gene was used to determine if that gene is upregulated in Latent
### A positive value for TB Progressor suggested the gene was downregulated in Latents
```{r}

Limma_results <- as_tibble(read_csv("C:/Users/Art/Desktop/CodeMonkey/Johnson Lab TB Project/Johnson_6k/TB_status_limma2019-07-31_Allfactors"))

#Pathways downregulated in Latent, upregulated in Progressors

Latent_neg <- dplyr::filter(Limma_results, TB_status_limma_TB_statusProgressor > 0.2)
Latent_neg_genenames <- dplyr::select(Latent_neg, X1, TB_status_limma_TB_statusProgressor)

#Add relative member score, divide all progessor log2 values by max value
Latent_neg_gene_mem <- mutate(Latent_neg_genenames,
                              member = TB_status_limma_TB_statusProgressor/max(TB_status_limma_TB_statusProgressor))
Latent_neg_gene_mem <- Latent_neg_gene_mem %>% 
  dplyr::select(X1, member) 


#write_csv(Latent_neg_gene_mem, "Latent_neg_gene_mem.csv")
```

```{r}
#Pathways upregulated in Latent, Down in Progressors

Latent_pos <- dplyr::filter(Limma_results, TB_status_limma_TB_statusProgressor < -0.2)
#write_csv(Latent_pos, "Latent_pos")

Latent_pos_genenames <- dplyr::select(Latent_pos, X1, TB_status_limma_TB_statusProgressor)

#Add relative member score, divide all progessor log2 values by max value
Latent_pos_gene_mem <- mutate(Latent_pos_genenames,
                              member = TB_status_limma_TB_statusProgressor/min(TB_status_limma_TB_statusProgressor))
Latent_pos_gene_mem <- Latent_pos_gene_mem %>% 
  dplyr::select(X1, member) 

enrichRSCE(brazil_sce, "MED7", db = "KEGG_2019_Human")
#write_csv(Latent_pos_gene_mem, "Latent_pos_gene_mem.csv")

c(Latent_pos_genenames[,1])
```

##The middle-latent group (latent_mid) have more pathways in common with Progressors than Latents do.  This is the code dealing with that group
```{r}
# list of middle-latent group

latent_mid <- c("TST.5", "TST.6", "TST.9", "TST.3", "TST.8", "TST.7", "TST.10", "TST.2", "TST.1")

# Changing the labels of the latent_mid

#TB_labels <- as.data.frame(brazil_sce_subset@colData@listData) 
#write_csv(TB_labels, "TB_labels.csv")

#changed by hand
TB_labels <- read_csv("TB_labels.csv")
view(TB_labels)

TB_labels$V1 <- as_factor(TB_labels$V1)
TB_labels$TB_status <- as_factor(TB_labels$TB_status)
view(TB_labels)


brazil_sce_subset@colData@listData[["TB_status"]] <- TB_labels$TB_status
brazil_sce_subset@colData@listData[["TB_status"]]

#filter SCE object by latent_mid and progressors

#Differential expression

#heatmap

#identify differentially regulated genes
```

##Filtering second version of Brazil_sce_subset
```{r}
#List of TB_status to keep
status <- c("Latent_mid", "Progressor")

#Smaller subset of filtered data
brazil_sce_subset_2 <- brazil_sce_subset[, brazil_sce_subset$TB_status %in% status]
brazil_sce_subset_2

#show if filtering worked
table(brazil_sce_subset_2@colData$TB_status)


brazil_sce_subset_2


brazil_sce_subset_2 <- filterSCData(brazil_sce_subset_2, 
                                  useAssay = "log_cpm",
                                  deletesamples = NULL,
                                  removeNoExpress = TRUE,
                                  removeBottom = 0.5,
                                  minimumDetectGenes = 1700,
                                  filterSpike = TRUE)

```


## Differential Expression analysis with Latent_mid as a group
```{r}
res <- scDiffEx(brazil_sce_subset_2,
                useAssay = "log_cpm",
                condition = "TB_status",
                significance = 0.05,
                ntop = 500, 
                usesig = TRUE,
                diffexmethod = "limma",
                levelofinterest = "Latent_mid",
                analysisType = "allcoef",
                adjust = "fdr")

#Genes downregulated compared to Progressors (if logFC is Progessor levels relative to Latent_mid)

Latent_mid_neg <- res %>% 
  rownames_to_column('gene') %>%
  dplyr::filter(logFC < 0, padj < 0.05) 

write_csv(Latent_mid_neg, "Latent_mid_neg.csv")

view(rownames(Latent_mid_neg))
#Genes upregulated i Latent_mid compared to progressors

Latent_mid_pos <- res %>% 
  rownames_to_column('gene') %>%
  dplyr::filter(logFC > 0, padj < 0.05) 

write_csv(Latent_mid_pos, "Latent_mid_pos.csv")


#plot heatmap
plotDiffEx(brazil_sce_subset_2, 
           condition = "TB_status",
           geneList = rownames(res)[1:500], 
           annotationColors = "auto",
           displayColumnLabels = FALSE,
           scaleExpression = TRUE)



```

## Take the top 500 genes for use in EnrichR from the Shiny app
## Keep the results with significant values
```{r}
enrichr_top500_res <- read_csv("enrichR-results-2019-07-25.csv") %>% 
  filter(Adjusted.P.value < 0.05)

write_csv(enrichr_top500_res, "enrichr_top500_sig.csv")
enrichr_top500_res
```


## Take the top 500 genes for use in EnrichR from the Shiny app, factor of interest vs all
## Keep the results with significant values
```{r}

#Filter top 500 genes
control <- read_csv("TB_factor_of_interest/control.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(control)

convert <- read_csv("TB_factor_of_interest/convert.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(convert)

latent <- read_csv("TB_factor_of_interest/latent.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(latent)

progressor <- read_csv("TB_factor_of_interest/progressor.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(progressor)

subclinical <- read_csv("TB_factor_of_interest/subclinical.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(subclinical)

TB_disease <- read_csv("TB_factor_of_interest/TB_disease.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(TB_disease)


#write filtered results to file for uploading to EnrichR
write_csv(control, "TB_factor_of_interest/control_top500.csv")
write_csv(convert, "TB_factor_of_interest/convert_top500.csv")
write_csv(latent, "TB_factor_of_interest/latent_top500.csv")
write_csv(progressor, "TB_factor_of_interest/progressor_top500.csv")
write_csv(subclinical, "TB_factor_of_interest/subclinical_top500.csv")
write_csv(TB_disease, "TB_factor_of_interest/TB_disease_top500.csv")
```

##TB_each vs each; every TB group against one other
```{r}
#control vs others pathways

#control vs convert pathways
control_convert <- read_csv("TB_each_vs_each/TB_Control_Convert_Pathways/TB_status_limma2019-11-20_Control_Convert.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(control_convert) #no significant differences

#control vs latent pathways
control_latent <- read_csv("TB_each_vs_each/TB_Control_Latent_Pathways/TB_status_limma2019-11-20_Control_Latent.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(control_latent) 

write_csv(control_latent, "TB_each_vs_each/TB_Control_Latent_Pathways/control_latent_top500.csv")

#control vs progressor pathways
control_progressor <- read_csv("TB_each_vs_each/TB_Control_Progressor_Pathways/TB_status_limma2019-11-20_Control_Progressor.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(control_progressor) 

write_csv(control_progressor, "TB_each_vs_each/TB_Control_Progressor_Pathways/control_progressor_top500.csv")

#control vs subclinical pathways
control_subclinical <- read_csv("TB_each_vs_each/TB_Control_Subclinical_Pathways/TB_status_limma2019-11-20_Control_Subclinical.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(control_subclinical) 

write_csv(control_subclinical, "TB_each_vs_each/TB_Control_Subclinical_Pathways/control_subclinical_top500.csv")

#control vs TB_disease pathways
control_TB_disease <- read_csv("TB_each_vs_each/TB_Control_TB_Disease_Pathways/TB_status_limma2019-11-20_Control_Disease.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(control_TB_disease) 

write_csv(control_TB_disease, "TB_each_vs_each/TB_Control_TB_Disease_Pathways/control_TB_disease_top500.csv")


#convert vs all
#convert vs latent pathways
convert_latent <- read_csv("TB_each_vs_each/TB_Convert_Latent_Pathways/TB_status_limma2019-11-20_Convert_Latent.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(convert_latent) 

write_csv(convert_latent, "TB_each_vs_each/TB_Convert_Latent_Pathways/convert_latent_top500.csv")

#convert vs progressor pathways
convert_progressor <- read_csv("TB_each_vs_each/TB_Convert_Progressors_Pathways/TB_status_limma2019-11-20_Convert_Progressors.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(convert_progressor) 

write_csv(convert_progressor, "TB_each_vs_each/TB_Convert_Progressors_Pathways/convert_progressor_top500.csv")

#convert vs subclinical pathways
convert_subclinical <- read_csv("TB_each_vs_each/TB_Convert_Subclinical_Pathways/TB_status_limma2019-11-20_Convert_Subclinical.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(convert_subclinical) 

write_csv(convert_subclinical, "TB_each_vs_each/TB_Convert_Subclinical_Pathways/convert_subclinical_top500.csv")

#convert vs TB_disease pathways
convert_TB_disease <- read_csv("TB_each_vs_each/TB_Convert_TB_Disease_Pathways/TB_status_limma2019-11-20_Convert_TB_Disease.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(convert_TB_disease) 

write_csv(convert_TB_disease, "TB_each_vs_each/TB_Convert_TB_Disease_Pathways/convert_TB_disease_top500.csv")


##TB disease vs all
#tb_disease vs latent pathways
tb_disease_latent <- read_csv("TB_each_vs_each/TB_Disease_Latent_Pathways/TB_status_limma2019-12-18_TB_disease_latent.csv") %>% 
  dplyr::filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(tb_disease_latent) 

write_csv(tb_disease_latent, "TB_each_vs_each/TB_Disease_Latent_Pathways/tb_disease_latent_top500.csv")

#tb_disease vs progressor pathways
tb_disease_progressor <- read_csv("TB_each_vs_each/TB_Disease_Progressor_Pathways/TB_status_limma2019-11-20_TB_disease_Progressor.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(tb_disease_progressor) 

write_csv(tb_disease_progressor, "TB_each_vs_each/TB_Disease_Progressor_Pathways/tb_disease_progressor_top500.csv")

#tb_disease vs subclinical pathways
tb_disease_subclinical <- read_csv("TB_each_vs_each/TB_Disease_Subclinical_Pathways/TB_status_limma2019-11-20_TB_Disease_Subclinical.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(tb_disease_subclinical) 

write_csv(tb_disease_subclinical, "TB_each_vs_each/TB_Disease_Subclinical_Pathways/tb_disease_subclinical_top500.csv")


#latent vs all
#latent vs progressor
latent_progressor <- read_csv("TB_each_vs_each/TB_Latent_Progressor_Pathways/TB_status_limma2020-01-09_Latent_Progressor.csv") %>% 
  dplyr::filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(latent_progressor) 

write_csv(latent_progressor, "TB_each_vs_each/TB_Latent_Progressor_Pathways/latent_progressor_top500.csv")

#latent vs subclinical pathways
latent_subclinical <- read_csv("TB_each_vs_each/TB_Latent_Subclinical_Pathways/TB_status_limma2019-11-20_Latent_Subclinical.csv") %>% 
  dplyr::filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(latent_subclinical) 

write_csv(latent_subclinical, "TB_each_vs_each/TB_Latent_Subclinical_Pathways/latent_subclinical_top500.csv")

#progressor vs subclinical
progressor_subclinical <- read_csv("TB_each_vs_each/TB_Progressor_Subclinical_Pathways/TB_status_limma2019-11-20_Progressor_Subclinical.csv") %>% 
  filter(TB_status_limma_padj < 0.05) %>% 
  top_n(-500, TB_status_limma_padj)
View(progressor_subclinical) 

write_csv(tb_disease_subclinical, "TB_each_vs_each/TB_Progressor_Subclinical_Pathways/progressor_subclinical_top500.csv")


```


##Combining the pathways from the database to see the top pathways in each one, each vs each
```{r}
list <- c("TB_Control_Latent_Pathways", "TB_Control_Progressor_Pathways", "TB_Control_Subclinical_Pathways", "TB_Control_TB_Disease_Pathways", "TB_Convert_Latent_Pathways", "TB_Convert_Progressors_Pathways", "TB_Convert_Subclinical_Pathways", "TB_Convert_TB_Disease_Pathways",  "TB_Disease_Progressor_Pathways", "TB_Latent_Subclinical_Pathways","TB_Latent_Progressor_Pathways")


no_sig_diff <- c("TB_Disease_Latent_Pathways","TB_Control_Convert_Pathways", "TB_Disease_Subclinical_Pathways", "TB_Progressor_Subclinical_Pathways","TB_Latent_Progressor_Pathways")

top_pathways <- for(i in list) {
  #extract data from enrichR databases
  kegg <- read_tsv(file.path("TB_each_vs_each", i , "KEGG_2019_Human_table.txt"))
  reactome <- read_tsv(file.path("TB_each_vs_each", i , "Reactome_2016_table.txt"))
  wiki <- read_tsv(file.path("TB_each_vs_each", i , "Reactome_2016_table.txt"))
  
  #bind the data files and filter top results
  joined <- rbind(kegg, reactome, wiki)
  names(joined) <- str_replace_all(names(joined), c(" " = "_" , "-" = "_"))
  pathways <- dplyr::filter(joined, Adjusted_P_value < 0.05)
  
  write_csv(pathways, file.path("TB_each_vs_each", i , "top_pathways.csv"))
}


```

